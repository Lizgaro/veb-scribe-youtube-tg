import test from 'node:test';
import assert from 'node:assert/strict';
import { analyzeText, generatePost } from '../lib/analyzer.js';

test('analyzeText returns markdown with key sections', () => {
  const input = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –±–∏–∑–Ω–µ—Å –∏ —Ä–æ—Å—Ç. –ö–∞–∫ –¥–æ–±–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—ã—Å—Ç—Ä–æ? –í–æ—Ç —Å–µ–∫—Ä–µ—Ç.';
  const md = analyzeText(input);
  assert.ok(md.includes('üíé –ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'));
  assert.ok(md.includes('üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å'));
  assert.ok(md.includes('üöÄ –í–∏—Ä–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã'));
  assert.ok(md.includes('üõ†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç'));
  assert.ok(md.includes('üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
});

test('generatePost creates a post string', () => {
  const md = analyzeText('–ü—Ä–æ—Å—Ç–æ–π –ª–∞–π—Ñ—Ö–∞–∫ –∏ –±—ã—Å—Ç—Ä—ã–µ —à–∞–≥–∏.');
  const post = generatePost(md, '–õ–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥', 'telegram');
  assert.match(post, /–•—É–∫:/);
  assert.match(post, /–ï—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ/);
});
