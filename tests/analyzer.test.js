import test from 'node:test';
import assert from 'node:assert/strict';
import { analyzeText, createPromptForLLM } from '../lib/analyzer.js';

test('analyzeText returns markdown with key sections', () => {
  const input = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –±–∏–∑–Ω–µ—Å –∏ —Ä–æ—Å—Ç. –ö–∞–∫ –¥–æ–±–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—ã—Å—Ç—Ä–æ? –í–æ—Ç —Å–µ–∫—Ä–µ—Ç.';
  const md = analyzeText(input);
  assert.ok(md.includes('üíé –ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'));
  assert.ok(md.includes('üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å'));
  assert.ok(md.includes('üöÄ –í–∏—Ä–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã'));
  assert.ok(md.includes('üõ†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç'));
  assert.ok(md.includes('üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'));
});

test('createPromptForLLM creates a detailed prompt string', () => {
  const transcript = '–≠—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ. –í –Ω–µ–º –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ –≤–∞–∂–Ω—ã—Ö –≤–µ—â–∞—Ö.';
  const title = '–í–∞–∂–Ω–æ–µ –≤–∏–¥–µ–æ';
  const description = '–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ –≤–∏–¥–µ–æ.';
  const topic = '–ù–æ–≤–∞—è —Ç–µ–º–∞';

  const prompt = createPromptForLLM(transcript, title, description, topic, 'telegram');

  assert.match(prompt, /# –ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø–æ—Å—Ç/);
  assert.match(prompt, /–ù–∞–∑–≤–∞–Ω–∏–µ:.*–í–∞–∂–Ω–æ–µ –≤–∏–¥–µ–æ/);
  assert.match(prompt, /–û–ø–∏—Å–∞–Ω–∏–µ:.*–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ –≤–∏–¥–µ–æ/);
  assert.match(prompt, /–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞ \(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\):.*–ù–æ–≤–∞—è —Ç–µ–º–∞/);
  assert.match(prompt, /–≠—Ç–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–∏–¥–µ–æ/);
});