// Minimal, rule-based analyzer to avoid external AI APIs.

const RU_STOPWORDS = new Set([
  "–∏","–≤","–≤–æ","–Ω–µ","—á—Ç–æ","–æ–Ω","–Ω–∞","—è","—Å","—Å–æ","–∫–∞–∫","–∞","—Ç–æ","–≤—Å–µ","–æ–Ω–∞","—Ç–∞–∫","–µ–≥–æ","–Ω–æ","–¥–∞","—Ç—ã","–∫","—É","–∂–µ","–≤—ã","–∑–∞","–±—ã","–ø–æ","—Ç–æ–ª—å–∫–æ","–µ–µ","–º–Ω–µ","–±—ã–ª–æ","–≤–æ—Ç","–æ—Ç","–º–µ–Ω—è","–µ—â–µ","–Ω–µ—Ç","–æ","–∏–∑","–µ–º—É","—Ç–µ–ø–µ—Ä—å","–∫–æ–≥–¥–∞","–¥–∞–∂–µ","–Ω—É","–≤–¥—Ä—É–≥","–ª–∏","–µ—Å–ª–∏","—É–∂–µ","–∏–ª–∏","–Ω–∏","–±—ã—Ç—å","–±—ã–ª","–Ω–µ–≥–æ","–¥–æ","–≤–∞—Å","–Ω–∏–±—É–¥—å","–æ–ø—è—Ç—å","—É–∂","–≤–∞–º","–≤–µ–¥—å","—Ç–∞–º","–ø–æ—Ç–æ–º","—Å–µ–±—è","–Ω–∏—á–µ–≥–æ","–µ–π","–º–æ–∂–µ—Ç","–æ–Ω–∏","—Ç—É—Ç","–≥–¥–µ","–µ—Å—Ç—å","–Ω–∞–¥–æ","–Ω–µ–π","–¥–ª—è","–º—ã","—Ç–µ–±—è","–∏—Ö","—á–µ–º","–±—ã–ª–∞","—Å–∞–º","—á—Ç–æ–±","–±–µ–∑","–±—É–¥—Ç–æ","—á–µ–≥–æ","—Ä–∞–∑","—Ç–æ–∂–µ","—Å–µ–±–µ","–ø–æ–¥","–±—É–¥–µ—Ç","–∂","—Ç–æ–≥–¥–∞","–∫—Ç–æ","—ç—Ç–æ—Ç","—Ç–æ–≥–æ","–ø–æ—Ç–æ–º—É","—ç—Ç–æ–≥–æ","–∫–∞–∫–æ–π","—Å–æ–≤—Å–µ–º","–Ω–∏–º","–∑–¥–µ—Å—å","—ç—Ç–æ–º","–æ–¥–∏–Ω","–ø–æ—á—Ç–∏","–º–æ–π","—Ç–µ–º","—á—Ç–æ–±—ã","–Ω–µ–µ","–∫–∞–∂–µ—Ç—Å—è","—Å–µ–π—á–∞—Å","–±—ã–ª–∏","–∫—É–¥–∞","–∑–∞—á–µ–º","–≤—Å–µ—Ö","–Ω–∏–∫–æ–≥–¥–∞","–º–æ–∂–Ω–æ","–ø—Ä–∏","–Ω–∞–∫–æ–Ω–µ—Ü","–¥–≤–∞","–æ–±","–¥—Ä—É–≥–æ–π","—Ö–æ—Ç—å","–ø–æ—Å–ª–µ","–Ω–∞–¥","–±–æ–ª—å—à–µ","—Ç–æ—Ç","—á–µ—Ä–µ–∑","—ç—Ç–∏","–Ω–∞—Å","–ø—Ä–æ","–≤—Å–µ–≥–æ","–Ω–∏—Ö","–∫–∞–∫–∞—è","–º–Ω–æ–≥–æ","—Ä–∞–∑–≤–µ","—Ç—Ä–∏","—ç—Ç—É","–º–æ—è","–≤–ø—Ä–æ—á–µ–º","—Ö–æ—Ä–æ—à–æ","—Å–≤–æ—é","—ç—Ç–æ–π","–ø–µ—Ä–µ–¥","–∏–Ω–æ–≥–¥–∞","–ª—É—á—à–µ","—á—É—Ç—å","—Ç–æ–º","–Ω–µ–ª—å–∑—è","—Ç–∞–∫–æ–π","–∏–º","–±–æ–ª–µ–µ","–≤—Å–µ–≥–¥–∞","–∫–æ–Ω–µ—á–Ω–æ","–≤—Å—é","–º–µ–∂–¥—É"
]);

function tokenize(text) {
  return (text.toLowerCase().match(/[a-—èa-z0-9—ë-]+/g) || []).filter(w => w.length > 1);
}

function topKeywords(text, limit = 8) {
  const freq = new Map();
  for (const w of tokenize(text)) {
    if (RU_STOPWORDS.has(w)) continue;
    freq.set(w, (freq.get(w) || 0) + 1);
  }
  return [...freq.entries()].sort((a,b)=>b[1]-a[1]).slice(0, limit).map(([w])=>w);
}

function detectPlatform(input) {
  if (/t\.me\//i.test(input)) return "Telegram";
  if (/youtube\.com|youtu\.be/i.test(input)) return "YouTube";
  return "Text";
}

function sentimentHeuristic(text) {
  const scores = { hope:0, fear:0, anger:0, curiosity:0 };
  const T = text.toLowerCase();
  const inc = (k, n=1)=> (scores[k]+=n);
  // very naive signals
  if (/(—Å–µ–∫—Ä–µ—Ç|–∫–∞–∫|—É–∑–Ω–∞–π|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º|—á—Ç–æ –±—É–¥–µ—Ç)/.test(T)) inc('curiosity',2);
  if (/(—Å—Ç—Ä–∞—Ö|—Ä–∏—Å–∫–∏|–æ—à–∏–±–∫–∞|–ø—Ä–æ–≤–∞–ª|–Ω–µ –¥–µ–ª–∞–π—Ç–µ|–æ–ø–∞—Å–Ω–æ)/.test(T)) inc('fear',2);
  if (/(–∑–ª—é—Å—å|–Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤|–±–µ—Å–∏—Ç|–æ–±–º–∞–Ω)/.test(T)) inc('anger',2);
  if (/(–º–æ–∂–Ω–æ|–ø–æ–ª—É—á–∏—Ç—Å—è|—Ä–µ—à–µ–Ω–∏–µ|–Ω–∞–¥–µ–∂–¥–∞|—à–∞–Ω—Å|—Ä–æ—Å—Ç)/.test(T)) inc('hope',2);
  // fallback by punctuation
  if (/!?/.test(T)) inc('curiosity');
  const key = Object.entries(scores).sort((a,b)=>b[1]-a[1])[0][0];
  return key;
}

function audienceHeuristic(text) {
  if (/(–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª|–±–∏–∑–Ω–µ—Å|—Å—Ç–∞—Ä—Ç–∞–ø)/i.test(text)) return "–ù–∞—á–∏–Ω–∞—é—â–∏–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏, –∏—â—É—â–∏–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ç–∞–∫—Ç–∏–∫–∏ —Ä–æ—Å—Ç–∞";
  if (/(–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥|—Ä–µ–∫–ª–∞–º–∞|—Ç—Ä–∞—Ñ–∏–∫)/i.test(text)) return "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏, —Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å –∏ –±—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å–∞–π—Ç—ã";
  if (/(—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫|–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç|–∫–æ–¥)/i.test(text)) return "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Ü–µ–Ω—è—â–∏–µ —á–µ—Ç–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –ø—Ä–∏–º–µ—Ä—ã";
  return "–®–∏—Ä–æ–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è—Å—è –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏";
}

function languageStyle(text) {
  if (/(—Ä–µ–≥—Ä–µ—Å—Å–∏—è|–≥–∏–ø–æ—Ç–µ–∑–∞|–∏—Ç–µ—Ä–∞—Ü–∏—è|–º–µ—Ç—Ä–∏–∫–∞|api|–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)/i.test(text)) return "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∏ —Å–ª–æ–∂–Ω—ã–π";
  if (/(–ª–∞–π—Ñ—Ö–∞–∫|–ø—Ä–æ—Å—Ç–æ|–±—ã—Å—Ç—Ä–æ|–ª–µ–≥–∫–æ)/i.test(text)) return "–ü—Ä–æ—Å—Ç–æ–π –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π";
  return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π";
}

function keyTrigger(text) {
  if (/(—Å–µ–∫—Ä–µ—Ç|–∫–∞–∫ –¥–æ–±–∏—Ç—å—Å—è|—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫)/i.test(text)) return "–û–±–µ—â–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏";
  if (/(–∫–µ–π—Å—ã|–ø—Ä–∏–º–µ—Ä—ã|—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)/i.test(text)) return "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–º–µ—Ä—ã";
  return "–Ø—Å–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª—å–∑—ã";
}

function hook(text) {
  const words = tokenize(text).slice(0, 20);
  return words.join(' ');
}

function retention(text) {
  const sentences = text.split(/[.!?\n]+/).map(s=>s.trim()).filter(Boolean);
  return sentences.slice(1, 4);
}

function cta(text) {
  if (/(–ø–æ–¥–ø–∏—Å|–∂–º–∏|—Å–º–æ—Ç—Ä–∏|—á–∏—Ç–∞–π|—Å–∫–∞—á–∞–π)/i.test(text)) return "–ü—Ä—è–º–æ–π: –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–æ–Ω—Ü–µ (–ø–æ–¥–ø–∏—Å–∫–∞/–ø–µ—Ä–µ—Ö–æ–¥)";
  return "–°–∫—Ä—ã—Ç—ã–π: –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞";
}

export function analyzeText(input) {
  const platform = detectPlatform(input);
  const keywords = topKeywords(input, 8);
  const emotion = sentimentHeuristic(input);
  const audience = audienceHeuristic(input);
  const style = languageStyle(input);
  const trig = keyTrigger(input);
  const hk = hook(input);
  const ret = retention(input);
  const call = cta(input);

  return [
    "üíé –ì–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    "",
    "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å",
    "",
    `–û—Å–Ω–æ–≤–Ω–∞—è —ç–º–æ—Ü–∏—è: ${emotion}`,
    `–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${audience}`,
    `–ö–ª—é—á–µ–≤–æ–π —Ç—Ä–∏–≥–≥–µ—Ä: ${trig}`,
    "",
    "üöÄ –í–∏—Ä–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
    "",
    `–•—É–∫ (–ü–µ—Ä–≤—ã–µ 10%): ${hk || "–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–Ω—Ç—Ä–∏–≥—É—é—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"}`,
    `–ú–æ–º–µ–Ω—Ç—ã —É–¥–µ—Ä–∂–∞–Ω–∏—è: ${ret.slice(0,3).map((s,i)=>`${i+1}) ${s}`).join(' ') || "2‚Äì3 —Å–∏–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–∞/–æ–±–µ—â–∞–Ω–∏—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ"}`,
    `–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (CTA): ${call}`,
    "",
    "üõ†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç",
    "",
    `–ö–∞—Ä–∫–∞—Å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: –ü—Ä–æ–±–ª–µ–º–∞ -> –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ -> –û—Ç–∫—Ä—ã—Ç–∏–µ -> –†–µ—à–µ–Ω–∏–µ -> –ü—Ä–∏–∑—ã–≤`,
    `–°—Ç–∏–ª—å —è–∑—ã–∫–∞: ${style}`,
    `–°–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –∏–¥–µ–∏: ${keywords.slice(0,5).map(k=>`¬´${k}¬ª`).join(', ')}`,
    "",
    "üìà –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
    "",
    `–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è SEO: ${keywords.join(', ')}`,
    `–ò–¥–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏: ${platform === 'YouTube' ? '–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (Shorts/Reels) —Å —Å–∏–ª—å–Ω—ã–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º –∫–∞–¥—Ä–æ–º' : platform === 'Telegram' ? '–¢—Ä–µ–¥ –∏–∑ 5‚Äì7 —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∏–Ω–∏-–∏—Ç–æ–≥–∞–º–∏' : '–õ–æ–Ω–≥—Ä–∏–¥ 800‚Äì1200 —Å–ª–æ–≤ —Å —á–µ—Ç–∫–∏–º–∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏'}`,
  ].join('\n');
}

export function generatePost(analysisMarkdown, topic = "–ù–æ–≤–∞—è —Ç–µ–º–∞", targetPlatform = "telegram") {
  // very simple generator: uses extracted pieces from analysis and topic
  const emotion = (analysisMarkdown.match(/–û—Å–Ω–æ–≤–Ω–∞—è —ç–º–æ—Ü–∏—è: (.+)/) || [,'–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å'])[1];
  const trig = (analysisMarkdown.match(/–ö–ª—é—á–µ–≤–æ–π —Ç—Ä–∏–≥–≥–µ—Ä: (.+)/) || [,'–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–ª—å–∑–∞'])[1];
  const style = (analysisMarkdown.match(/–°—Ç–∏–ª—å —è–∑—ã–∫–∞: (.+)/) || [,'–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'])[1];

  const opener = `–•—É–∫: ${trig}. ${topic ? '–¢–µ–º–∞: ' + topic + '.' : ''}`;
  const body = `\n\n–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ: –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n‚Äî 1) –ü—Ä–æ–±–ª–µ–º–∞: —É –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –Ω–µ—Ç —Å–∏—Å—Ç–µ–º—ã.\n‚Äî 2) –û—Ç–∫—Ä—ã—Ç–∏–µ: –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –¥–∞—é—Ç –Ω–µ–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n‚Äî 3) –†–µ—à–µ–Ω–∏–µ: –Ω–∞—á–Ω–∏ —Å–µ–≥–æ–¥–Ω—è —Å –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.`;
  const closer = `\n\n–≠–º–æ—Ü–∏—è: ${emotion}. –ï—Å–ª–∏ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏ –∏ –ø–æ–¥–µ–ª–∏—Å—å.`;

  const post = [opener, body, closer].join('');
  if (targetPlatform.toLowerCase().includes('tele')) {
    return post;
  }
  // default fallback
  return post;
}
